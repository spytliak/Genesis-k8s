---
apiVersion: v1
kind: ConfigMap
metadata:
  name: flask-config
  namespace: flask-app
data:
  FLASK_DEBUG: "1"
  FLASK_APP: api.py
  FLASK_ENVIRONMENT: development
  DB_USERNAME: devops
  DB_NAME: student
  DB_HOSTNAME: mysql

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-app
  labels:
    app: flask-app
  namespace: flask-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flask-app
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: flask-app
    spec:
      containers:
        - name: flask-app
          image: spytliak/genesis-flask-rest-api:v1
          imagePullPolicy: Always
          command: ["python"]
          args: ["-m", "flask", "run"]
          envFrom:
            - configMapRef:
                name: flask-config
          env:
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: mysql-password
          resources:
            limits:
              memory: "256Mi"
              cpu: "300m"
            requests:
              memory: "256Mi"
              cpu: "200m"
          ports:
            - containerPort: 5000
              name: flask
          startupProbe:
            httpGet:
              path: /api/health-check/ok
              port: flask
            failureThreshold: 5
            periodSeconds: 3
          readinessProbe:
            httpGet:
              path: /api/health-check/ok
              port: flask
            failureThreshold: 5
            periodSeconds: 3

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: flask-app-hpa
  namespace: flask-app
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: flask-app
  minReplicas: 1
  maxReplicas: 3
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
status:
  observedGeneration: 1
  currentReplicas: 1
  desiredReplicas: 1
  currentMetrics:
  - type: Resource
    resource:
      name: cpu
      current:
        averageUtilization: 0
        averageValue: 0
  - type: Resource
    resource:
      name: memory
      current:
        averageUtilization: 0
        averageValue: 0

---
apiVersion: v1
kind: Service
metadata:
  name: flask-app-svc
  namespace: flask-app
spec:
  selector:
    app: flask-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: flask
      name: flask-app-svc

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
    namespace: flask-app
    name: flask-app-ingress
    annotations:
        nginx.ingress.kubernetes.io/ssl-redirect: "false"
        kubernetes.io/ingress.class: "nginx"
spec:
  rules:
  - host: flask-app.nip.io
    http:
      paths:
      - pathType: Prefix
        path: "/"
        backend:
          service:
            name: flask-app-svc
            port:
              number: 80

# ---
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#     namespace: flask-app
#     name: flask-app-ingress
#     annotations:
#         kubernetes.io/ingress.class: alb
#         ingress.kubernetes.io/ssl-redirect: "false"
#         alb.ingress.kubernetes.io/group.name: flask-app.main-group
#         alb.ingress.kubernetes.io/scheme: internet-facing
#         alb.ingress.kubernetes.io/target-type: ip
#         alb.ingress.kubernetes.io/ip-address-type: ipv4
#         alb.ingress.kubernetes.io/tags: Service=flask-app.Ingress
#         alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}]'
#         alb.ingress.kubernetes.io/success-codes: 200,404
#         alb.ingress.kubernetes.io/healthcheck-path: /api/health-check/ok
#         alb.ingress.kubernetes.io/backend-protocol: HTTP
#         alb.ingress.kubernetes.io/healthcheck-protocol : HTTP
#         alb.ingress.kubernetes.io/target-group-attributes: "deregistration_delay.timeout_seconds=30"
# spec:
#     rules:
#         - http:
#             paths:
#             -   path: "/"
#                 pathType: Prefix
#                 backend:
#                     service:
#                         name: flask-app-svc
#                         port:
#                             number: 80

---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: flask-app-mon
  generation: 1
  labels:
    app: flask-app-mon
    release: kube-prometheus-stack
  namespace: kube-prometheus-stack
spec:
  namespaceSelector:
    matchNames:
    - default
  selector:
    matchLabels:
      component: backend
      app: flask-app
  endpoints:
  - path: /api/health-check/ok
    port: http
