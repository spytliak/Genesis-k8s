name: EKS

on:
  #push: 
  #  branches:
  #    - main
  #pull_request:
  #  branches:
  #    - main

  workflow_dispatch:
     inputs:
       TF_LOG:
        description: 'Terraform LOG'
        required: false
        default: '' 
        type: choice
        options:
        - INFO
        - DEBUG
        - TRACE

#env:

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    env:
      TF_LOG: ${{ inputs.TF_LOG }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    defaults:
      run:
        shell: bash
        working-directory: ./terraform/project_eks

    steps:

    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.2.4
        terraform_wrapper: false

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      id: tf_fmt
      continue-on-error: true
      run: terraform fmt -check

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: tf_init
      continue-on-error: false
      run: terraform init

    # Validates the configuration files in a directory
    - name: Terraform Validate
      id: tf_validate
      continue-on-error: false
      run: terraform validate -no-color

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: tf_plan
      continue-on-error: false
      run: terraform plan -input=false

    # Build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      id: tf_apply
      continue-on-error: false
      if: steps.tf_plan.outcome == 'success'
      run: terraform apply -auto-approve -input=false

    # Save all terraform output
    - name: Save terraform output
      id: output
      continue-on-error: true
      if: steps.APP_instances_ip.outcome == 'success'
      run: |
        terraform output -json > ../../terraform.log
        ls -la ../../terraform.log

    # Upload artifact
    - name: Upload terraform output artifact
      if: steps.output.outcome == 'success'
      uses: actions/upload-artifact@v3
      with:
        name: terraform
        path: terraform.log

  report:
    name: Report
    runs-on: ubuntu-latest
    continue-on-error: true
    needs: deploy
    if: always()

    steps:
      # Notification to SLACK chat
      - name: Notification to Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ needs.deploy.result }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took,pullRequest
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
